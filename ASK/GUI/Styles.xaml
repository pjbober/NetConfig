<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:gui="clr-namespace:ASK.GUI"
                    xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <gui:InvertBooleanToVisibilityConverter x:Key="VisibilityConverter"/>

    <!-- Kolory -->

    <SolidColorBrush x:Key="WindowBackgroundColor" Color="#F24A8BAA"/>
    <SolidColorBrush x:Key="StdForegroundColor" Color="#FFFFFF" />

    <SolidColorBrush x:Key="LighterColor" Color="#AAFFFFFF" />
    <SolidColorBrush x:Key="LighterHoverColor" Color="#CCFFFFFF" />
    <SolidColorBrush x:Key="LighterPressedColor" Color="#22000000" />

    <SolidColorBrush x:Key="DarkerColor" Color="#22000000" />
    
    <SolidColorBrush x:Key="BlueColor" Color="#79B1CC" />
    <SolidColorBrush x:Key="BlueHoverColor" Color="#99C4D8" />
    <SolidColorBrush x:Key="BluePressedColor" Color="#477F9A" />

    <SolidColorBrush x:Key="BlueActiveColor" Color="#8ebdd4" />
    
    <SolidColorBrush x:Key="WhiteTextColor" Color="White" />
    
    <SolidColorBrush x:Key="RedColor" Color="#cb3838" />
    <SolidColorBrush x:Key="RedHoverColor" Color="#d86868" />
    <SolidColorBrush x:Key="RedPressedColor" Color="#800c0c" />

    <SolidColorBrush x:Key="GreenColor" Color="#82cc78" />
    <SolidColorBrush x:Key="GreenHoverColor" Color="#9dd896" />
    <SolidColorBrush x:Key="GreenPressedColor" Color="#49a33e" />

    <SolidColorBrush x:Key="GreyColor" Color="#90a9b5" />
    <SolidColorBrush x:Key="GreyHoverColor" Color="#aabdc6" />
    <SolidColorBrush x:Key="GreyPressedColor" Color="#628495" />

    <SolidColorBrush x:Key="YellowColor" Color="#cacc78" />
    <SolidColorBrush x:Key="YellowHoverColor" Color="#dbdda4" />
    <SolidColorBrush x:Key="YellowPressedColor" Color="#a2a43f" />

    <SolidColorBrush x:Key="OrangeColor" Color="#cca878" />
    <SolidColorBrush x:Key="OrangeHoverColor" Color="#d2b28a" />
    <SolidColorBrush x:Key="OrangePressedColor" Color="#c2965c" />

    <!-- koniec kolorów -->
    
    <!-- Template dla przycisku czyszczący wygląd -->
    <ControlTemplate x:Key="ModernButtonTemplate" TargetType="{x:Type Button}">
        <StackPanel Background="{TemplateBinding Background}">
            <ContentPresenter Content="{TemplateBinding Content}"/>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="ModernButtonWithContentTemplate" TargetType="{x:Type Button}">
        <StackPanel Background="{TemplateBinding Background}" Margin="4,0">
            <ContentPresenter Content="{TemplateBinding Content}" Margin="8,2"/>
        </StackPanel>
    </ControlTemplate>

    <!-- Styl dla customowych buttonów -->
    <Style x:Key="ModernButton" TargetType="{x:Type Button}">
        <Setter Property="Template" Value="{StaticResource ModernButtonTemplate}"/>
        <Setter Property="TextBlock.FontSize" Value="16"/>
        <Setter Property="Foreground" Value="{StaticResource StdForegroundColor}"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style BasedOn="{StaticResource ModernButton}" x:Key="ModernDefaultButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource BlueColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource BlueHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource BluePressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource ModernButton}" x:Key="ModernContentButton" TargetType="{x:Type Button}">
        <Setter Property="Template" Value="{StaticResource ModernButtonWithContentTemplate}"/>
        <Setter Property="Background" Value="{StaticResource BlueColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource BlueHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource BluePressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Profile -->
    
    <Style BasedOn="{StaticResource ModernButton}" x:Key="ProfileButtonDefault" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource BlueColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource BlueHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource BluePressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource ModernButton}" x:Key="ProfileButtonActive" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource GreenColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource GreenHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource GreenPressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource ModernButton}" x:Key="ProfileButtonActivating" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource YellowColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource YellowHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource YellowPressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource ModernButton}" x:Key="ProfileButtonDeactivating" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource RedColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource RedHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource RedPressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- koniec Profili -->

    <!-- Dla ikonki edycji profilu -->
    <Style BasedOn="{StaticResource ModernButton}" x:Key="ProfileEditButtonEdited" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource RedColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource RedHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource RedPressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Interface -->
    <Style BasedOn="{StaticResource ModernButton}" x:Key="InterfaceButtonOn" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource BlueColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource BlueHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource BluePressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource ModernButton}" x:Key="InterfaceButtonOff" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource GreyColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource GreyHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource GreyPressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    
    <!-- Ikona -->
    <Style BasedOn="{StaticResource ModernButton}" x:Key="IconButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource BlueColor}"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource BlueHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource BluePressedColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CloseButton" BasedOn="{StaticResource ModernDefaultButton}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource RedColor}"/>
        <Setter Property="Margin" Value="10"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource RedHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource RedPressedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    
    <!-- OptionsPanel -->
    <Style x:Key="OptionsLabel" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource StdForegroundColor}"/>
        <Setter Property="TextBlock.FontSize" Value="16"/>
    </Style>
    

    <Style x:Key="DefaultButton" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="{StaticResource BlueColor}"/>
        <Setter Property="Foreground" Value="{StaticResource StdForegroundColor}"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>

        <Setter Property="Template" Value="{DynamicResource ButtonTextTemplate}" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource BlueHoverColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
                <Setter Property="Background" Value="{StaticResource BluePressedColor}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <ControlTemplate x:Key="ButtonTextTemplate" TargetType="{x:Type Button}">
        <Grid x:Name="grid" ClipToBounds="True" Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">

            <ContentPresenter x:Name="contentPresenter"
    				Content="{TemplateBinding Content}" 
    				TextBlock.Foreground="{TemplateBinding Foreground}"
    				TextBlock.FontSize="16"
    				TextBlock.TextAlignment="{TemplateBinding TextBlock.TextAlignment}"
    				Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>

        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="BlankButtonTemplate" TargetType="{x:Type Button}">
        <Grid x:Name="grid" ClipToBounds="True" Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">

            <ContentPresenter x:Name="contentPresenter"
    				Content="{TemplateBinding Content}" 
    				TextBlock.Foreground="{TemplateBinding Foreground}"
    				TextBlock.FontSize="16"
    				TextBlock.TextAlignment="{TemplateBinding TextBlock.TextAlignment}"
                    Margin="4"
                    HorizontalAlignment="Stretch" VerticalAlignment="Center"/>

        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ToggleButtonTextTemplate" TargetType="{x:Type ToggleButton}">
        <Grid x:Name="grid" ClipToBounds="True" Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">

            <ContentPresenter x:Name="contentPresenter"
    				Content="{TemplateBinding Content}" 
    				TextBlock.Foreground="{TemplateBinding Foreground}"
    				TextBlock.FontSize="16"
    				TextBlock.TextAlignment="{TemplateBinding TextBlock.TextAlignment}"
    				Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>

        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ButtonIconTemplate" TargetType="{x:Type Button}">
        <Grid x:Name="grid" Margin="0" ClipToBounds="True" Background="{TemplateBinding Background}"  RenderTransformOrigin="0.5,0.5">

            <ContentPresenter x:Name="contentPresenter"
    				Content="{TemplateBinding Content}" 
    				TextBlock.Foreground="{TemplateBinding Foreground}"
    				TextBlock.TextAlignment="{TemplateBinding TextBlock.TextAlignment}"
    				Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"/>

        </Grid>
    </ControlTemplate>
  

    <Style TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Height="20" Width="20" Background="{StaticResource BlueColor}" >

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" 
                                         Storyboard.TargetName="CheckGlyph"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" 
                                         Storyboard.TargetName="CheckGlyph"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" 
                                         Storyboard.TargetName="IndeterminateGlyph"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Image x:Name="CheckGlyph" Source="../Images/check.png" Opacity="0"/>
                        <Image x:Name="IndeterminateGlyph" Source="../Images/question.png" Opacity="0"/>
                        <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                            Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <!--text box-->

    <Style TargetType="TextBox">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{StaticResource BlueColor}"/>
        <Setter Property="Foreground" Value="{StaticResource StdForegroundColor}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <!-- combobox -->


    <!--<Style TargetType="ComboBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">

                    <StackPanel>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)" To=".55"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)" To="1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="FocusedDropDown">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="PopupBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border x:Name="ContentPresenterBorder">
                            
                                <ToggleButton DockPanel.Dock="Right" x:Name="DropDownToggle" Margin="0" HorizontalContentAlignment="Right" Background="{TemplateBinding Background}" BorderThickness="0">
                                    <DockPanel>
                                        <Image DockPanel.Dock="Right" Source="../Images/collapse-down.png" Height="16" Width="16"/>
                                        <ContentPresenter DockPanel.Dock="Left" x:Name="ContentPresenter"/>
                                    </DockPanel>
                                </ToggleButton>
                                

                                --><!--<ContentPresenter DockPanel.Dock="Left" x:Name="ContentPresenter">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{TemplateBinding}" />
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>--><!--

                        </Border>
                        
                        <Rectangle x:Name="DisabledVisualElement" Fill="White" Opacity="0" IsHitTestVisible="false" />
                        <Rectangle x:Name="FocusVisualElement" Margin="1"  Stroke="#FF6DBDD1" StrokeThickness="1" Opacity="0" IsHitTestVisible="false" />

                        <Popup x:Name="Popup" Visibility="Visible" PopupAnimation="Slide" IsOpen="True">
                            <Border x:Name="PopupBorder" HorizontalAlignment="Stretch" 
                                    BorderThickness="2" 
                                    BorderBrush="Red">
                                <ItemsPresenter/>
                            </Border>
                        </Popup>

                    </StackPanel>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    
    
    <!--<Style TargetType="ComboBox">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Blue"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Red"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)" To=".55"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)" To="1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="FocusedDropDown">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="PopupBorder" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ValidationErrorElement" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" >
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="InvalidFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ValidationErrorElement" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" >
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="validationTooltip" Storyboard.TargetProperty="IsOpen">
                                            <DiscreteObjectKeyFrame KeyTime="0" >
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Boolean>True</sys:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="ContentPresenterBorder">
                            <Grid>
                                <ToggleButton x:Name="DropDownToggle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  Margin="0" HorizontalContentAlignment="Right" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                    <Path x:Name="BtnArrow" Height="4" Width="8" Stretch="Uniform" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " Margin="0,0,6,0" HorizontalAlignment="Right">
                                        <Path.Fill>
                                            <SolidColorBrush x:Name="BtnArrowColor" Color="#FF333333"/>
                                        </Path.Fill>
                                    </Path>
                                </ToggleButton>
                                <ContentPresenter x:Name="ContentPresenter" 
                                                Margin="{TemplateBinding Padding}"  
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                </ContentPresenter>
                            </Grid>
                        </Border>
                        <Rectangle x:Name="DisabledVisualElement" RadiusX="3" RadiusY="3" Fill="White" Opacity="0" IsHitTestVisible="false" />
                        <Rectangle x:Name="FocusVisualElement" RadiusX="2" RadiusY="2" Margin="1"  Stroke="#FF6DBDD1" StrokeThickness="1" Opacity="0" IsHitTestVisible="false" />
                        <Border x:Name="ValidationErrorElement" BorderThickness="1" CornerRadius="1" BorderBrush="#FFDB000C" Visibility="Collapsed">
                            <ToolTipService.ToolTip>
                                <ToolTip x:Name="validationTooltip" Placement="Right" 
                                           PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" 
                                           DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToolTip.Triggers>
                                        <EventTrigger RoutedEvent="Canvas.Loaded">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="validationTooltip" Storyboard.TargetProperty="IsHitTestVisible">
                                                            <DiscreteObjectKeyFrame KeyTime="0" >
                                                                <DiscreteObjectKeyFrame.Value>
                                                                    <sys:Boolean>true</sys:Boolean>
                                                                </DiscreteObjectKeyFrame.Value>
                                                            </DiscreteObjectKeyFrame>
                                                        </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                    </ToolTip.Triggers>
                                </ToolTip>
                            </ToolTipService.ToolTip>
                            <Grid Width="12" Height="12" HorizontalAlignment="Right" Margin="1,-4,-4,0" VerticalAlignment="Top" Background="Transparent">
                                <Path Margin="1,3,0,0" Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="#FFDC000C"/>
                                <Path Margin="1,3,0,0" Data="M 0,0 L2,0 L 8,6 L8,8" Fill="#ffffff"/>
                            </Grid>
                        </Border>
                        <Popup x:Name="Popup">
                            <Border x:Name="PopupBorder" HorizontalAlignment="Stretch" Height="Auto" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                <ScrollViewer x:Name="ScrollViewer" BorderThickness="0" Padding="1">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->






</ResourceDictionary>
    